const ADMIN_ID = 5291401463; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram ID
require('dotenv').config();

const token = process.env.TELEGRAM_TOKEN;
const TelegramBot = require('node-telegram-bot-api');

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
const bot = new TelegramBot(token, { polling: true });

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.');
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpText = `
–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:
/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/buttons - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
/s - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞/–≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–± –¥–ª—è –ø–æ–∏—Å–∫–∞
  `;
  bot.sendMessage(chatId, helpText);
});

// –ö–æ–º–∞–Ω–¥–∞ /buttons ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏
bot.onText(/\/buttons/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–ö–Ω–æ–ø–∫–∞ 1', callback_data: 'btn1' },
          { text: '–ö–Ω–æ–ø–∫–∞ 2', callback_data: 'btn2' }
        ]
      ]
    }
  };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:', options);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  if (data === 'btn1') {
    bot.sendMessage(chatId, '–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 1!');
  } else if (data === 'btn2') {
    bot.sendMessage(chatId, '–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 2!');
  }
});

// –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ
const ytSearch = require('yt-search');

bot.onText(/\/s (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const query = match[1]; // —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /s

  bot.sendMessage(chatId, `–ò—â—É —Ç—Ä–µ–∫ <3: ${query}...`);

  try {
    const r = await ytSearch(query);
    const videos = r.videos;
    if (videos.length > 0) {
      const video = videos[0];
      const url = video.url;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
      bot.sendMessage(chatId, `–ù–∞—à—ë–ª:\n${video.title}\n${url}`);
    } else {
      bot.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï');
    }
  } catch (error) {
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ üòû');
    console.error(error);
  }
});




const fs = require('fs');
const path = require('path');
const usersFile = path.resolve(__dirname, 'users.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥
function logUser(user) {
  fs.readFile(usersFile, 'utf8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:', err);
      return;
    }

    let users = [];
    try {
      users = JSON.parse(data);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ users.json:', e);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const exists = users.some(u => u.id === user.id);
    if (!exists) {
      users.push(user);
      fs.writeFile(usersFile, JSON.stringify(users, null, 2), (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ users.json:', err);
        else console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id}`);
      });
    }
  });
}

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
bot.on('message', (msg) => {
  const user = {
    id: msg.from.id,
    first_name: msg.from.first_name || '',
    last_name: msg.from.last_name || '',
    username: msg.from.username || '',
    date: new Date().toISOString()
  };

  logUser(user);

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const chatId = msg.chat.id;
  const text = msg.text || '';

  if (!text.startsWith('/')) {
    bot.sendMessage(chatId, `–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${text}`);
  }
});


bot.onText(/\/users/, (msg) => {
  const chatId = msg.chat.id;

  if (msg.from.id !== ADMIN_ID) {
    return bot.sendMessage(chatId, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.');
  }

  fs.readFile(usersFile, 'utf8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:', err);
      bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return;
    }

    let users = [];
    try {
      users = JSON.parse(data);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ users.json:', e);
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return;
    }

    if (users.length === 0) {
      bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return;
    }

    let response = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
    users.forEach((user, index) => {
      response += `${index + 1}. ${user.first_name || ''} ${user.last_name || ''} (@${user.username || '-'}) ‚Äî ID: ${user.id}\n`;
    });

    if (response.length > 4000) {
      bot.sendMessage(chatId, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.');
    } else {
      bot.sendMessage(chatId, response);
    }
  });
});

  // –î–∞–ª–µ–µ –∫–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è users.json –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞...
  // (—Ç–æ—Ç, —á—Ç–æ —è –ø–∏—Å–∞–ª —Ä–∞–Ω—å—à–µ)


